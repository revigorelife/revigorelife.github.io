# Go to repo root
cd /workspaces/revigorelife.github.io

# Create directories
mkdir -p .github/workflows \
  client/src/{components/ui,pages} \
  client/public

# GitHub Actions workflow
cat > .github/workflows/pages.yml << 'EOF'
name: Build & Deploy (Vite → GitHub Pages)
on:
  push:
    branches: [ main ]
  workflow_dispatch:
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Install deps
        working-directory: client
        run: npm ci || npm i
      - name: Build (Vite)
        working-directory: client
        run: npm run build:static
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: client/dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
EOF

# Root vite.config.static.ts
cat > vite.config.static.ts << 'EOF'
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
export default defineConfig({
  plugins: [react()],
  base: "/",
  build: {
    outDir: "dist",
    sourcemap: false,
    rollupOptions: { output: { manualChunks: undefined } }
  },
  resolve: { alias: { "@": path.resolve(__dirname, "./client/src") } },
  root: "./client"
});
EOF

# Client package.json
cat > client/package.json << 'EOF'
{
  "name": "revigorelife-static",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "build:static": "vite build --config ../vite.config.static.ts",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-tooltip": "^1.0.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "lucide-react": "^0.363.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwind-merge": "^2.2.1",
    "tailwindcss-animate": "^1.0.7",
    "wouter": "^3.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.56",
    "@types/react-dom": "^18.2.19",
    "@vitejs/plugin-react": "^4.2.1",
    "@tailwindcss/typography": "^0.5.10",
    "autoprefixer": "^10.4.17",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.2.2",
    "vite": "^5.1.4"
  },
  "overrides": {
    "esbuild": "^0.25.0"
  }
}
EOF

# Tailwind config
cat > client/tailwind.config.ts << 'EOF'
import type { Config } from "tailwindcss";
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      colors: {
        wellness: {
          primary: "hsl(137, 42%, 33%)",
          secondary: "hsl(137, 42%, 23%)",
          accent: "hsl(37, 52%, 64%)"
        }
      }
    }
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")]
} satisfies Config;
EOF

# PostCSS config
cat > client/postcss.config.js << 'EOF'
export default {
  plugins: { tailwindcss: {}, autoprefixer: {} }
}
EOF

# tsconfig
cat > client/tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "baseUrl": ".",
    "paths": { "@/*": ["./src/*"] }
  },
  "include": ["src"]
}
EOF

# index.html
cat > client/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RevigoreLife - Premium Wellness</title>
    <meta name="description" content="Premium wellness products to help you feel your best." />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
EOF

# CNAME & nojekyll
echo "revigorelife.com" > client/public/CNAME
touch client/public/.nojekyll

# main.tsx
cat > client/src/main.tsx << 'EOF'
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";
createRoot(document.getElementById("root")!).render(<App />);
EOF

# App.tsx
cat > client/src/App.tsx << 'EOF'
import { Switch, Route } from "wouter";
import { TooltipProvider } from "@/components/ui/tooltip";
import Home from "@/pages/home";
import NotFound from "@/pages/not-found";
function Router() {
  return (
    <Switch>
      <Route path="/" component={Home} />
      <Route component={NotFound} />
    </Switch>
  );
}
export default function App() {
  return (
    <TooltipProvider>
      <Router />
    </TooltipProvider>
  );
}
EOF

# index.css
cat > client/src/index.css << 'EOF'
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;
:root{
  --wellness-primary: hsl(137, 42%, 33%);
  --wellness-secondary: hsl(137, 42%, 23%);
  --wellness-accent: hsl(37, 52%, 64%);
}
@layer base{
  body { @apply font-sans antialiased bg-white text-gray-900; }
}
EOF

# Tooltip component
cat > client/src/components/ui/tooltip.tsx << 'EOF'
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
export function TooltipProvider({ children }: { children: React.ReactNode }) {
  return <TooltipPrimitive.Provider delayDuration={200}>{children}</TooltipPrimitive.Provider>;
}
export const Tooltip = TooltipPrimitive.Root;
export const TooltipTrigger = TooltipPrimitive.Trigger;
export const TooltipContent = TooltipPrimitive.Content;
EOF

# Pages
cat > client/src/pages/home.tsx << 'EOF'
export default function Home() {
  return (
    <main className="mx-auto max-w-3xl p-6">
      <h1 className="text-3xl font-bold text-wellness-primary">RevigoreLife</h1>
      <p className="mt-3 text-slate-700">
        Welcome! Edit <code>client/src/pages/home.tsx</code> to add your content.
      </p>
    </main>
  );
}
EOF

cat > client/src/pages/not-found.tsx << 'EOF'
import { Link } from "wouter";
export default function NotFound() {
  return (
    <main className="mx-auto max-w-3xl p-6">
      <h1 className="text-2xl font-semibold">404 — Not found</h1>
      <p className="mt-2"><Link href="/" className="underline">Go home</Link></p>
    </main>
  );
}
EOF

echo "✅ All files created."
